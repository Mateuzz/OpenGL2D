!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/Mateus/archive/doctum/6 periodo/projeto integrador vi/projeto/src/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/p6.0.20221218.0/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
ActualTexturesSlots	config.h	/^    inline int ActualTexturesSlots = 16; \/\/ 16 is the minimum, we can up this during runtime u/;"	v	namespace:config	typeref:typename:int
AddAttribute	BufferLayout.cpp	/^void Bufferlayout::AddAttribute(int type, unsigned count)$/;"	f	class:Bufferlayout	typeref:typename:void
AtributesView	BufferLayout.h	/^    const auto& AtributesView() const { return attributes; }$/;"	f	class:Bufferlayout	typeref:typename:const auto &
AttributesCount	BufferLayout.h	/^    auto AttributesCount() const { return attributesCount; }$/;"	f	class:Bufferlayout	typeref:typename:auto
BatchRenderer	TestSpecification.h	/^        enum RendererType { Normal, BatchRenderer };$/;"	e	enum:test::TestSpecification::RendererType
BatchRenderer2D	BatchRenderer2D.h	/^class BatchRenderer2D {$/;"	c
BeginBatch	BatchRenderer2D.cpp	/^void BatchRenderer2D::BeginBatch()$/;"	f	class:BatchRenderer2D	typeref:typename:void
BeginScene	Renderer2D.cpp	/^void Renderer2D::BeginScene()$/;"	f	class:Renderer2D	typeref:typename:void
Bind	ElementBuffer.cpp	/^void ElementBuffer::Bind() const$/;"	f	class:ElementBuffer	typeref:typename:void
Bind	Shader.cpp	/^void Shader::Bind() const$/;"	f	class:Shader	typeref:typename:void
Bind	Texture.cpp	/^void Texture::Bind(unsigned index) const$/;"	f	class:Texture	typeref:typename:void
Bind	VertexArray.cpp	/^void VertexArray::Bind() const$/;"	f	class:VertexArray	typeref:typename:void
Bind	VertexBuffer.cpp	/^void VertexBuffer::Bind() const$/;"	f	class:VertexBuffer	typeref:typename:void
Bufferlayout	BufferLayout.cpp	/^Bufferlayout::Bufferlayout(std::initializer_list<std::pair<int, unsigned>> attributesList)$/;"	f	class:Bufferlayout
Bufferlayout	BufferLayout.h	/^class Bufferlayout {$/;"	c
ClearBuffer	BatchRenderer2D.cpp	/^void BatchRenderer2D::ClearBuffer()$/;"	f	class:BatchRenderer2D	typeref:typename:void
ClearBuffer	Renderer2D.cpp	/^void Renderer2D::ClearBuffer()$/;"	f	class:Renderer2D	typeref:typename:void
ColumnData	TestResult.h	/^        struct ColumnData {$/;"	s	struct:test::TestResult
CompileShader	Shader.cpp	/^    unsigned CompileShader(unsigned type, const char* source)$/;"	f	namespace:__anon621d186d0211	typeref:typename:unsigned
Count	ElementBuffer.h	/^    auto Count() const { return count; }$/;"	f	class:ElementBuffer	typeref:typename:auto
CreateShader	Shader.cpp	/^    unsigned CreateShader(const char* vertexShader, const char* fragmentShader)$/;"	f	namespace:__anon621d186d0211	typeref:typename:unsigned
DrawQuad	BatchRenderer2D.cpp	/^void BatchRenderer2D::DrawQuad(const glm::vec2 position, const glm::vec2& size, const Texture& t/;"	f	class:BatchRenderer2D	typeref:typename:void
DrawQuad	BatchRenderer2D.cpp	/^void BatchRenderer2D::DrawQuad(const glm::vec2 position,$/;"	f	class:BatchRenderer2D	typeref:typename:void
DrawQuad	Renderer2D.cpp	/^void Renderer2D::DrawQuad(const glm::vec2 position, const glm::vec2& size, const Texture& textur/;"	f	class:Renderer2D	typeref:typename:void
DrawQuad	Renderer2D.cpp	/^void Renderer2D::DrawQuad(const glm::vec2 position,$/;"	f	class:Renderer2D	typeref:typename:void
ElementBuffer	ElementBuffer.cpp	/^ElementBuffer::ElementBuffer()$/;"	f	class:ElementBuffer
ElementBuffer	ElementBuffer.cpp	/^ElementBuffer::ElementBuffer(unsigned *indices, unsigned count, int mode)$/;"	f	class:ElementBuffer
ElementBuffer	ElementBuffer.h	/^class ElementBuffer {$/;"	c
EndBatch	BatchRenderer2D.cpp	/^void BatchRenderer2D::EndBatch()$/;"	f	class:BatchRenderer2D	typeref:typename:void
Flush	BatchRenderer2D.cpp	/^void BatchRenderer2D::Flush()$/;"	f	class:BatchRenderer2D	typeref:typename:void
FromFile	util.cpp	/^    std::string FromFile(const char* filepath)$/;"	f	namespace:util	typeref:typename:std::string
Generate	ElementBuffer.cpp	/^void ElementBuffer::Generate()$/;"	f	class:ElementBuffer	typeref:typename:void
Generate	Texture.cpp	/^void Texture::Generate()$/;"	f	class:Texture	typeref:typename:void
Generate	VertexArray.cpp	/^void VertexArray::Generate()$/;"	f	class:VertexArray	typeref:typename:void
Generate	VertexBuffer.cpp	/^void VertexBuffer::Generate()$/;"	f	class:VertexBuffer	typeref:typename:void
GenerateLayout	BatchRenderer2D.cpp	/^        static Bufferlayout GenerateLayout() $/;"	f	struct:__anon74f2ede50111::Vertex	typeref:typename:Bufferlayout	file:
GetFragmentShader	BatchRenderer2D.cpp	/^    std::string GetFragmentShader()$/;"	f	namespace:__anon74f2ede50111	typeref:typename:std::string
GetSizeType	BufferLayout.cpp	/^unsigned VertexAttribute::GetSizeType(int type)$/;"	f	class:VertexAttribute	typeref:typename:unsigned
GetStats	BatchRenderer2D.cpp	/^const BatchRenderer2D::Statistics& BatchRenderer2D::GetStats()$/;"	f	class:BatchRenderer2D	typeref:typename:const BatchRenderer2D::Statistics &
GetUniformLocation	Shader.cpp	/^unsigned Shader::GetUniformLocation(const char* name)$/;"	f	class:Shader	typeref:typename:unsigned
GetVertexShader	BatchRenderer2D.cpp	/^    std::string GetVertexShader()$/;"	f	namespace:__anon74f2ede50111	typeref:typename:std::string
Height	Texture.h	/^    auto Height() const { return height; }$/;"	f	class:Texture	typeref:typename:auto
Id	Shader.h	/^    auto Id() const { return id; }$/;"	f	class:Shader	typeref:typename:auto
Id	Texture.h	/^    auto Id() const { return id; }$/;"	f	class:Texture	typeref:typename:auto
Initialize	BatchRenderer2D.cpp	/^void BatchRenderer2D::Initialize(int width, int height, int x, int y)$/;"	f	class:BatchRenderer2D	typeref:typename:void
Initialize	Renderer2D.cpp	/^void Renderer2D::Initialize(int width, int height, int x, int y)$/;"	f	class:Renderer2D	typeref:typename:void
InitializeTestSystem	TestController.cpp	/^    void TestController::InitializeTestSystem(unsigned repeatTimes)$/;"	f	class:test::TestController	typeref:typename:void
IsLoaded	Shader.h	/^    bool IsLoaded() const { return id != 0; }$/;"	f	class:Shader	typeref:typename:bool
Load	Shader.cpp	/^void Shader::Load(const char* vertexShader, const char* fragmentShader)$/;"	f	class:Shader	typeref:typename:void
Load	Shader.cpp	/^void Shader::Load(const std::string& vertexShader, const std::string& fragmentShader)$/;"	f	class:Shader	typeref:typename:void
Load	Texture.cpp	/^void Texture::Load(const char *filename, bool alpha)$/;"	f	class:Texture	typeref:typename:void
MaxAtributes	BufferLayout.h	/^    static constexpr unsigned MaxAtributes = 15;$/;"	m	class:Bufferlayout	typeref:typename:unsigned
MaxIndexCount	BatchRenderer2D.cpp	/^    constexpr size_t MaxIndexCount = 6 * MaxQuadCount;$/;"	v	namespace:__anon74f2ede50111	typeref:typename:size_t
MaxQuadCount	BatchRenderer2D.cpp	/^    constexpr size_t MaxQuadCount = 1000;$/;"	v	namespace:__anon74f2ede50111	typeref:typename:size_t
MaxTextureSlots	config.h	/^    constexpr int MaxTextureSlots = 32;$/;"	v	namespace:config	typeref:typename:int
MaxVertexCount	BatchRenderer2D.cpp	/^    constexpr size_t MaxVertexCount = 4 * MaxQuadCount;$/;"	v	namespace:__anon74f2ede50111	typeref:typename:size_t
Metadata	TestResult.h	/^        struct Metadata {$/;"	s	struct:test::TestResult
MultipleAlternatingTextures	TestSpecification.h	/^        enum Type { OneTexture, MultipleAlternatingTextures };$/;"	e	enum:test::TestSpecification::Type
Normal	TestSpecification.h	/^        enum RendererType { Normal, BatchRenderer };$/;"	e	enum:test::TestSpecification::RendererType
OneTexture	TestSpecification.h	/^        enum Type { OneTexture, MultipleAlternatingTextures };$/;"	e	enum:test::TestSpecification::Type
PrintToFile	main.cpp	/^void PrintToFile(const char *filepath, const test::TestResult& result)$/;"	f	typeref:typename:void
Renderer2D	Renderer2D.h	/^class Renderer2D {$/;"	c
RendererData	BatchRenderer2D.cpp	/^    struct RendererData {$/;"	s	namespace:__anon74f2ede50111	file:
RendererData	Renderer2D.cpp	/^    struct RendererData {$/;"	s	namespace:__anone6c91aa30111	file:
RendererType	TestSpecification.h	/^        enum RendererType { Normal, BatchRenderer };$/;"	g	struct:test::TestSpecification
RepeatTestNumber	config.h	/^    constexpr unsigned RepeatTestNumber = 100;$/;"	v	namespace:config	typeref:typename:unsigned
ResetAttributes	BufferLayout.cpp	/^void Bufferlayout::ResetAttributes()$/;"	f	class:Bufferlayout	typeref:typename:void
ResetStats	BatchRenderer2D.cpp	/^void BatchRenderer2D::ResetStats()$/;"	f	class:BatchRenderer2D	typeref:typename:void
RunAll	TestController.cpp	/^    TestResult TestController::RunAll(const std::vector<TestSpecification>& specs)$/;"	f	class:test::TestController	typeref:typename:TestResult
SDL_MAIN_HANDLED	main.cpp	/^#define SDL_MAIN_HANDLED$/;"	d	file:
STB_IMAGE_IMPLEMENTATION	Texture.cpp	/^#define STB_IMAGE_IMPLEMENTATION$/;"	d	file:
SetAttribute	VertexArray.cpp	/^void VertexArray::SetAttribute(const VertexBuffer& vbo, const Bufferlayout& layout)$/;"	f	class:VertexArray	typeref:typename:void
SetBlendDrawMode	BatchRenderer2D.cpp	/^void BatchRenderer2D::SetBlendDrawMode()$/;"	f	class:BatchRenderer2D	typeref:typename:void
SetBlendDrawMode	Renderer2D.cpp	/^void Renderer2D::SetBlendDrawMode()$/;"	f	class:Renderer2D	typeref:typename:void
SetClearColor	BatchRenderer2D.cpp	/^void BatchRenderer2D::SetClearColor(float r, float g, float b, float a)$/;"	f	class:BatchRenderer2D	typeref:typename:void
SetClearColor	Renderer2D.cpp	/^void Renderer2D::SetClearColor(float r, float g, float b, float a)$/;"	f	class:Renderer2D	typeref:typename:void
SetDrawMode	BatchRenderer2D.cpp	/^void BatchRenderer2D::SetDrawMode(int mode)$/;"	f	class:BatchRenderer2D	typeref:typename:void
SetDrawMode	Renderer2D.cpp	/^void Renderer2D::SetDrawMode(int mode)$/;"	f	class:Renderer2D	typeref:typename:void
SetUniform1f	Shader.cpp	/^void Shader::SetUniform1f(const char* name, float v)$/;"	f	class:Shader	typeref:typename:void
SetUniform1i	Shader.cpp	/^void Shader::SetUniform1i(const char* name, int v)$/;"	f	class:Shader	typeref:typename:void
SetUniform3f	Shader.cpp	/^void Shader::SetUniform3f(const char* name, float v1, float v2, float v3)$/;"	f	class:Shader	typeref:typename:void
SetUniform4f	Shader.cpp	/^void Shader::SetUniform4f(const char* name, float v1, float v2, float v3, float v4)$/;"	f	class:Shader	typeref:typename:void
SetUniform4m	Shader.cpp	/^void Shader::SetUniform4m(const char* name, const glm::mat4& model)$/;"	f	class:Shader	typeref:typename:void
SetViewport	BatchRenderer2D.cpp	/^void BatchRenderer2D::SetViewport(int x, int y, int width, int height)$/;"	f	class:BatchRenderer2D	typeref:typename:void
SetViewport	Renderer2D.cpp	/^void Renderer2D::SetViewport(int x, int y, int width, int height)$/;"	f	class:Renderer2D	typeref:typename:void
Shader	Shader.cpp	/^Shader::Shader()$/;"	f	class:Shader
Shader	Shader.cpp	/^Shader::Shader(const char* vertexShader, const char* fragmentShader)$/;"	f	class:Shader
Shader	Shader.cpp	/^Shader::Shader(const std::string& vertexShader, const std::string& fragmentShader)$/;"	f	class:Shader
Shader	Shader.h	/^class Shader {$/;"	c
Shutdown	BatchRenderer2D.cpp	/^void BatchRenderer2D::Shutdown()$/;"	f	class:BatchRenderer2D	typeref:typename:void
Shutdown	Renderer2D.cpp	/^void Renderer2D::Shutdown()$/;"	f	class:Renderer2D	typeref:typename:void
ShutdownTestSystem	TestController.cpp	/^    void TestController::ShutdownTestSystem()$/;"	f	class:test::TestController	typeref:typename:void
Statistics	BatchRenderer2D.h	/^    struct Statistics {$/;"	s	class:BatchRenderer2D
Stride	BufferLayout.h	/^    auto Stride() const { return size; }$/;"	f	class:Bufferlayout	typeref:typename:auto
TestController	TestController.h	/^    class TestController {$/;"	c	namespace:test
TestResult	TestResult.h	/^    struct TestResult {$/;"	s	namespace:test
TestSpecification	TestSpecification.h	/^    struct TestSpecification {$/;"	s	namespace:test
TestUnit	TestController.cpp	/^    TestUnitResult TestController::TestUnit(const TestSpecification& spec)$/;"	f	class:test::TestController	typeref:typename:TestUnitResult
TestUnitResult	TestController.cpp	/^    struct TestUnitResult {$/;"	s	namespace:test	file:
Texture	Texture.cpp	/^Texture::Texture()$/;"	f	class:Texture
Texture	Texture.cpp	/^Texture::Texture(const char* filename, bool alpha)$/;"	f	class:Texture
Texture	Texture.h	/^class Texture {$/;"	c
TexturesCount	config.h	/^    constexpr size_t TexturesCount = 32;$/;"	v	namespace:config	typeref:typename:size_t
Type	TestSpecification.h	/^        enum Type { OneTexture, MultipleAlternatingTextures };$/;"	g	struct:test::TestSpecification
Unbind	ElementBuffer.cpp	/^void ElementBuffer::Unbind() const$/;"	f	class:ElementBuffer	typeref:typename:void
Unbind	Shader.cpp	/^void Shader::Unbind() const$/;"	f	class:Shader	typeref:typename:void
Unbind	Texture.cpp	/^void Texture::Unbind(unsigned index)$/;"	f	class:Texture	typeref:typename:void
Unbind	VertexArray.cpp	/^void VertexArray::Unbind() const$/;"	f	class:VertexArray	typeref:typename:void
Unbind	VertexBuffer.cpp	/^void VertexBuffer::Unbind() const$/;"	f	class:VertexBuffer	typeref:typename:void
UpdateData	ElementBuffer.cpp	/^void ElementBuffer::UpdateData(unsigned int *indices, unsigned int count, int mode)$/;"	f	class:ElementBuffer	typeref:typename:void
UpdateData	VertexBuffer.cpp	/^void VertexBuffer::UpdateData(void *data, size_t size, int mode)$/;"	f	class:VertexBuffer	typeref:typename:void
UpdateProjection	BatchRenderer2D.cpp	/^void BatchRenderer2D::UpdateProjection(int x, int y, int width, int height)$/;"	f	class:BatchRenderer2D	typeref:typename:void
UpdateProjection	Renderer2D.cpp	/^void Renderer2D::UpdateProjection(int x, int y, int width, int height)$/;"	f	class:Renderer2D	typeref:typename:void
UpdateSubData	VertexBuffer.cpp	/^void VertexBuffer::UpdateSubData(GLintptr offset, GLsizeiptr size, const void *data)$/;"	f	class:VertexBuffer	typeref:typename:void
Vertex	BatchRenderer2D.cpp	/^    struct Vertex {$/;"	s	namespace:__anon74f2ede50111	file:
VertexArray	VertexArray.cpp	/^VertexArray::VertexArray()$/;"	f	class:VertexArray
VertexArray	VertexArray.h	/^class VertexArray {$/;"	c
VertexAttribute	BufferLayout.h	/^struct VertexAttribute {$/;"	s
VertexBuffer	VertexBuffer.cpp	/^VertexBuffer::VertexBuffer()$/;"	f	class:VertexBuffer
VertexBuffer	VertexBuffer.cpp	/^VertexBuffer::VertexBuffer(void *data, size_t size, int mode)$/;"	f	class:VertexBuffer
VertexBuffer	VertexBuffer.h	/^class VertexBuffer {$/;"	c
Width	Texture.h	/^    auto Width() const { return width; }$/;"	f	class:Texture	typeref:typename:auto
__anon621d186d0111	Shader.cpp	/^namespace {$/;"	n	file:
__anon621d186d0211	Shader.cpp	/^namespace {$/;"	n	file:
__anon74f2ede50111	BatchRenderer2D.cpp	/^namespace {$/;"	n	file:
__anone6c91aa30111	Renderer2D.cpp	/^namespace {$/;"	n	file:
attributes	BufferLayout.h	/^    std::array<VertexAttribute, MaxAtributes> attributes;$/;"	m	class:Bufferlayout	typeref:typename:std::array<VertexAttribute,MaxAtributes>
attributesCount	BufferLayout.h	/^    unsigned attributesCount = 0;$/;"	m	class:Bufferlayout	typeref:typename:unsigned
colorRGB	BatchRenderer2D.cpp	/^        glm::vec4 colorRGB;$/;"	m	struct:__anon74f2ede50111::Vertex	typeref:typename:glm::vec4	file:
columns	TestResult.h	/^        std::vector<ColumnData> columns;$/;"	m	struct:test::TestResult	typeref:typename:std::vector<ColumnData>
columnsSize	TestResult.h	/^            size_t columnsSize;$/;"	m	struct:test::TestResult::Metadata	typeref:typename:size_t
config	config.h	/^namespace config {$/;"	n
count	BufferLayout.h	/^    unsigned count;$/;"	m	struct:VertexAttribute	typeref:typename:unsigned
count	ElementBuffer.h	/^    unsigned count;$/;"	m	class:ElementBuffer	typeref:typename:unsigned
drawCalls	BatchRenderer2D.h	/^        unsigned drawCalls;$/;"	m	struct:BatchRenderer2D::Statistics	typeref:typename:unsigned
drawCalls	TestController.cpp	/^        unsigned drawCalls;$/;"	m	struct:test::TestUnitResult	typeref:typename:unsigned	file:
drawCalls	TestResult.h	/^            unsigned drawCalls;$/;"	m	struct:test::TestResult::ColumnData	typeref:typename:unsigned
ebo	BatchRenderer2D.cpp	/^        ElementBuffer ebo;$/;"	m	struct:__anon74f2ede50111::RendererData	typeref:typename:ElementBuffer	file:
gRendererData	BatchRenderer2D.cpp	/^    RendererData gRendererData;$/;"	v	namespace:__anon74f2ede50111	typeref:typename:RendererData
gRendererData	Renderer2D.cpp	/^    RendererData gRendererData;$/;"	v	namespace:__anone6c91aa30111	typeref:typename:RendererData
gRepeatTimes	TestController.cpp	/^    unsigned gRepeatTimes;$/;"	v	namespace:test	typeref:typename:unsigned
gStats	BatchRenderer2D.cpp	/^    BatchRenderer2D::Statistics gStats;$/;"	v	namespace:__anon74f2ede50111	typeref:typename:BatchRenderer2D::Statistics
gTextures	TestController.cpp	/^    Texture gTextures[config::TexturesCount];$/;"	v	namespace:test	typeref:typename:Texture[]
gWindow	config.h	/^    inline SDL_Window* gWindow;$/;"	v	namespace:config	typeref:typename:SDL_Window *
height	BatchRenderer2D.cpp	/^        int height;$/;"	m	struct:__anon74f2ede50111::RendererData	typeref:typename:int	file:
height	Renderer2D.cpp	/^        int height;$/;"	m	struct:__anone6c91aa30111::RendererData	typeref:typename:int	file:
height	Texture.h	/^    int height;$/;"	m	class:Texture	typeref:typename:int
id	ElementBuffer.h	/^    unsigned id;$/;"	m	class:ElementBuffer	typeref:typename:unsigned
id	Shader.h	/^    unsigned id;$/;"	m	class:Shader	typeref:typename:unsigned
id	Texture.h	/^    unsigned id;$/;"	m	class:Texture	typeref:typename:unsigned
id	VertexArray.h	/^    unsigned id;$/;"	m	class:VertexArray	typeref:typename:unsigned
id	VertexBuffer.h	/^    unsigned id;$/;"	m	class:VertexBuffer	typeref:typename:unsigned
indexCount	BatchRenderer2D.cpp	/^        unsigned indexCount;$/;"	m	struct:__anon74f2ede50111::RendererData	typeref:typename:unsigned	file:
main	main.cpp	/^int main(int argc, char** argv)$/;"	f	typeref:typename:int
metadata	TestResult.h	/^        Metadata metadata;$/;"	m	struct:test::TestResult	typeref:typename:Metadata
microseconds	TestController.cpp	/^        unsigned microseconds;$/;"	m	struct:test::TestUnitResult	typeref:typename:unsigned	file:
microseconds	TestResult.h	/^            unsigned microseconds;$/;"	m	struct:test::TestResult::ColumnData	typeref:typename:unsigned
normalized	BufferLayout.h	/^    int normalized;$/;"	m	struct:VertexAttribute	typeref:typename:int
offset	BufferLayout.h	/^    unsigned offset;$/;"	m	struct:VertexAttribute	typeref:typename:unsigned
positionCord	BatchRenderer2D.cpp	/^        glm::vec3 positionCord;$/;"	m	struct:__anon74f2ede50111::Vertex	typeref:typename:glm::vec3	file:
projection	BatchRenderer2D.cpp	/^        glm::mat4 projection;$/;"	m	struct:__anon74f2ede50111::RendererData	typeref:typename:glm::mat4	file:
projection	Renderer2D.cpp	/^        glm::mat4 projection;$/;"	m	struct:__anone6c91aa30111::RendererData	typeref:typename:glm::mat4	file:
rendererType	TestResult.h	/^            TestSpecification::RendererType rendererType;$/;"	m	struct:test::TestResult::ColumnData	typeref:typename:TestSpecification::RendererType
rendererType	TestSpecification.h	/^        RendererType rendererType;$/;"	m	struct:test::TestSpecification	typeref:typename:RendererType
repeatTimes	TestResult.h	/^            unsigned repeatTimes;$/;"	m	struct:test::TestResult::Metadata	typeref:typename:unsigned
shader	BatchRenderer2D.cpp	/^        Shader shader;$/;"	m	struct:__anon74f2ede50111::RendererData	typeref:typename:Shader	file:
shader	Renderer2D.cpp	/^        Shader shader;$/;"	m	struct:__anone6c91aa30111::RendererData	typeref:typename:Shader	file:
shaderLocations	Shader.h	/^    std::unordered_map<const char*, unsigned> shaderLocations;$/;"	m	class:Shader	typeref:typename:std::unordered_map<const char *,unsigned>
size	BufferLayout.h	/^    unsigned size = 0;$/;"	m	class:Bufferlayout	typeref:typename:unsigned
spritesToRender	TestResult.h	/^            unsigned spritesToRender;$/;"	m	struct:test::TestResult::ColumnData	typeref:typename:unsigned
spritesToRender	TestSpecification.h	/^        unsigned spritesToRender;$/;"	m	struct:test::TestSpecification	typeref:typename:unsigned
test	TestController.cpp	/^namespace test {$/;"	n	file:
test	TestController.h	/^namespace test {$/;"	n
test	TestResult.h	/^namespace test {$/;"	n
test	TestSpecification.h	/^namespace test {$/;"	n
textureCord	BatchRenderer2D.cpp	/^        glm::vec2 textureCord;$/;"	m	struct:__anon74f2ede50111::Vertex	typeref:typename:glm::vec2	file:
textureIndex	BatchRenderer2D.cpp	/^        float textureIndex;$/;"	m	struct:__anon74f2ede50111::Vertex	typeref:typename:float	file:
textureSlotIndex	BatchRenderer2D.cpp	/^        unsigned textureSlotIndex;$/;"	m	struct:__anon74f2ede50111::RendererData	typeref:typename:unsigned	file:
textureSlots	BatchRenderer2D.cpp	/^        std::array<unsigned, config::MaxTextureSlots> textureSlots;$/;"	m	struct:__anon74f2ede50111::RendererData	typeref:typename:std::array<unsigned,config::MaxTextureSlots>	file:
type	BufferLayout.h	/^    int type; $/;"	m	struct:VertexAttribute	typeref:typename:int
type	TestResult.h	/^            TestSpecification::Type type;$/;"	m	struct:test::TestResult::ColumnData	typeref:typename:TestSpecification::Type
type	TestSpecification.h	/^        Type type;$/;"	m	struct:test::TestSpecification	typeref:typename:Type
util	util.cpp	/^namespace util {$/;"	n	file:
util	util.h	/^namespace util {$/;"	n
vao	BatchRenderer2D.cpp	/^        VertexArray vao;$/;"	m	struct:__anon74f2ede50111::RendererData	typeref:typename:VertexArray	file:
vao	Renderer2D.cpp	/^        VertexArray vao;$/;"	m	struct:__anone6c91aa30111::RendererData	typeref:typename:VertexArray	file:
vbo	BatchRenderer2D.cpp	/^        VertexBuffer vbo;$/;"	m	struct:__anon74f2ede50111::RendererData	typeref:typename:VertexBuffer	file:
vbo	Renderer2D.cpp	/^        VertexBuffer vbo;$/;"	m	struct:__anone6c91aa30111::RendererData	typeref:typename:VertexBuffer	file:
vertexData	BatchRenderer2D.cpp	/^        Vertex* vertexData;$/;"	m	struct:__anon74f2ede50111::RendererData	typeref:typename:Vertex *	file:
vertexDataPtr	BatchRenderer2D.cpp	/^        Vertex* vertexDataPtr;$/;"	m	struct:__anon74f2ede50111::RendererData	typeref:typename:Vertex *	file:
width	BatchRenderer2D.cpp	/^        int width;$/;"	m	struct:__anon74f2ede50111::RendererData	typeref:typename:int	file:
width	Renderer2D.cpp	/^        int width;$/;"	m	struct:__anone6c91aa30111::RendererData	typeref:typename:int	file:
width	Texture.h	/^    int width;$/;"	m	class:Texture	typeref:typename:int
x	BatchRenderer2D.cpp	/^        int x;$/;"	m	struct:__anon74f2ede50111::RendererData	typeref:typename:int	file:
x	Renderer2D.cpp	/^        int x;$/;"	m	struct:__anone6c91aa30111::RendererData	typeref:typename:int	file:
y	BatchRenderer2D.cpp	/^        int y;$/;"	m	struct:__anon74f2ede50111::RendererData	typeref:typename:int	file:
y	Renderer2D.cpp	/^        int y;$/;"	m	struct:__anone6c91aa30111::RendererData	typeref:typename:int	file:
~ElementBuffer	ElementBuffer.cpp	/^ElementBuffer::~ElementBuffer()$/;"	f	class:ElementBuffer
~Shader	Shader.cpp	/^Shader::~Shader()$/;"	f	class:Shader
~Texture	Texture.cpp	/^Texture::~Texture()$/;"	f	class:Texture
~VertexArray	VertexArray.cpp	/^VertexArray::~VertexArray()$/;"	f	class:VertexArray
~VertexBuffer	VertexBuffer.cpp	/^VertexBuffer::~VertexBuffer()$/;"	f	class:VertexBuffer
